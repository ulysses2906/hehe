[{"C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\index.js":"1","C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\App.js":"2","C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\components\\AddContact.js":"3","C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\components\\ViewContact.js":"4","C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\components\\DeleteContact.js":"5","C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\components\\UpdateContact.js":"6"},{"size":205,"mtime":1634610717168,"results":"7","hashOfConfig":"8"},{"size":697,"mtime":1634610716925,"results":"9","hashOfConfig":"8"},{"size":9738,"mtime":1634610717274,"results":"10","hashOfConfig":"8"},{"size":2998,"mtime":1634610717514,"results":"11","hashOfConfig":"8"},{"size":0,"mtime":1634610717325,"results":"12","hashOfConfig":"8"},{"size":9092,"mtime":1634610717423,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"85kw6l",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\index.js",[],"C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\App.js",[],"C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\components\\AddContact.js",["29","30","31"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport Background from \"../components/images/back.jpg\";\nimport Axios from \"axios\";\nimport _ from \"lodash\";\n\n// add contact container\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: url(${Background}) no-repeat center;\n  -webkit-background-size: cover;\n  -moz-background-size: cover;\n  -o-background-size: cover;\n  background-size: cover;\n  position: relative;\n`;\n\n// form design codes\nconst FormContainer = styled.div`\n  width: 30%;\n  height: fit-content;\n  padding: 20px 0px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-radius: 10px;\n  border: 1px solid dodgerblue;\n  z-index: 5;\n  background: rgba(0, 0, 0, 0.61);\n  box-shadow: 0 0 5px dodgerblue;\n  margin: auto;\n\n  h3 {\n    color: white;\n  }\n\n  .InputControl {\n    width: 100%;\n    margin: auto;\n    display: block;\n    margin-bottom: 10px;\n  }\n\n  label {\n    color: white;\n  }\n\n  .InputControl input {\n    width: 100%;\n    margin-top: 3px;\n    padding: 3px 0px;\n  }\n\n  .InputControl select {\n    width: 100%;\n    padding: 3px 0px;\n  }\n\n  .InputControl p {\n    color: yellow;\n    text-align: center;\n    margin-top: 5px;\n    font-size: 12px;\n  }\n\n  .button {\n    padding: 3px 10px;\n  }\n\n  .AddButton {\n    width: fit-content;\n    margin: auto;\n  }\n`;\n\nconst TableContainer = styled.div`\n  width: 60%;\n  height: fit-content;\n  z-index: 5;\n  margin: auto;\n  border: 1px solid;\n  margin-top: 145px;\n  background: white;\n\n  th {\n    color: white;\n    background: dodgerblue;\n    padding: 5px;\n  }\n\n  td {\n    text-align: center;\n    padding: 5px 3px;\n    color: black;\n  }\n\n  td .blue {\n    padding: 5px 5px;\n    border: none;\n    color: white;\n    background: blue;\n    cursor: pointer;\n  }\n\n  td .green {\n    padding: 5px 5px;\n    border: none;\n    color: white;\n    background: green;\n    margin: 0px 8px;\n    cursor: pointer;\n  }\n\n  td {\n    border: 1px solid gray;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n  td .red {\n    padding: 5px 5px;\n    border: none;\n    color: white;\n    background: red;\n    cursor: pointer;\n  }\n\n  nav {\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n  }\n\n  nav ul {\n    display: flex;\n    list-style: none;\n    color: white;\n  }\n\n  nav ul li {\n    padding: 2px 5px;\n    color: black;\n    background: white;\n    border: 1px solid dodgerblue;\n    cursor: pointer;\n  }\n  nav ul li.active-page {\n    background: dodgerblue;\n    color: white;\n  }\n\n  table {\n    width: 100%;\n  }\n`;\n\nconst NumericOnly =\n  /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\nconst schema = Yup.object().shape({\n  fullName: Yup.string()\n    .required(\"Full Name field cannot be blank\")\n    .matches(/^[aA-zZ\\s]+$/, \"Full Name field accept characters values only\")\n    .max(30),\n  email: Yup.string()\n    .email(\"Email Address field should have email domain\")\n    .required(\"Email Address field cannot be blank\")\n    .max(45, \"Email Address field accept up to 45 in size only\"),\n  contactNumber: Yup.string()\n    .required(\"Contact Number field cannot be blank\")\n    .matches(NumericOnly, \"Contact Number field accept numeric values only\")\n    .max(11, \"Contact Number field accept up to 11 in size only\"),\n  location: Yup.string().required(\"Location field cannot be blank\"),\n  registeredDate: Yup.date().default(function () {\n    return new Date();\n  }),\n});\n\nexport function AddContact(props) {\n  const pageSize = 5;\n\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [contactNumber, setContactNumber] = useState(0);\n  const [location, setLocation] = useState(\"\");\n  const [registeredDate, setRegisteredDate] = useState(\"\");\n\n  const [contactList, setContactList] = useState([]);\n  const [paginatedList, setPaginatedList] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const AddContact = () => {\n    Axios.post(\"http://localhost:3001/create\", {\n      fullName: fullName,\n      email: email,\n      contactNumber: contactNumber,\n      location: location,\n      registeredDate: registeredDate,\n    }).then(() => {\n      setContactList([\n        ...contactList,\n        {\n          fullName: fullName,\n          email: email,\n          contactNumber: contactNumber,\n          location: location,\n          registeredDate: registeredDate,\n        },\n      ]);\n    });\n  };\n\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/contacts\").then((response) => {\n      setContactList(response.data);\n      setPaginatedList(_(response.data).slice(0).take(pageSize).value());\n    });\n  }, []);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const submitForm = (data) => {};\n\n  const pageCount = contactList ? Math.ceil(contactList.length / pageSize) : 0;\n\n  // if(pageCount === 0) return null;\n  const pages = _.range(1, pageCount + 1);\n\n  const pagination = (pageNo) => {\n    setCurrentPage(pageNo);\n    const startIndex = (pageNo - 1) * pageSize;\n    const paginatedList = _(contactList)\n      .slice(startIndex)\n      .take(pageSize)\n      .value();\n    setPaginatedList(paginatedList);\n  };\n\n  return (\n    <Container>\n      <FormContainer>\n        {/* header title */}\n        <h3>Add Contact</h3>\n\n        <form onSubmit={handleSubmit(submitForm)}>\n          <div className=\"InputControl\">\n            <label>Full Name:</label>\n            <input\n              name=\"fullName\"\n              placeholder=\"Last Name, First Name, Middle Initial\"\n              {...register(\"fullName\")}\n              onChange={(event) => {\n                setFullName(event.target.value);\n              }}\n            />\n            <p>{errors.fullName?.message}</p>\n          </div>\n\n          <div className=\"InputControl\">\n            <label>Email:</label>\n            <input\n              name=\"email\"\n              placeholder=\"Email\"\n              {...register(\"email\")}\n              onChange={(event) => {\n                setEmail(event.target.value);\n              }}\n            />\n            <p>{errors.email?.message}</p>\n          </div>\n\n          <div className=\"InputControl\">\n            <label>Contact Number:</label>\n            <input\n              type=\"text\"\n              name=\"contactNumber\"\n              placeholder=\"09232321321\"\n              {...register(\"contactNumber\")}\n              onChange={(event) => {\n                setContactNumber(event.target.value);\n              }}\n            />\n            <p>{errors.contactNumber?.message}</p>\n          </div>\n\n          <div className=\"InputControl\">\n            <label>Location:</label>\n            <select\n              name=\"location\"\n              {...register(\"location\")}\n              onChange={(event) => {\n                setLocation(event.target.value);\n              }}\n            >\n              <option value=\"\" disabled selected hidden>\n                Select Location\n              </option>\n              <option>Manila</option>\n              <option>Cebu</option>\n            </select>\n            <p>{errors.location?.message}</p>\n          </div>\n\n          <div className=\"InputControl\">\n            <label>Full Name:</label>\n            <input\n              type=\"date\"\n              name=\"registeredDate\"\n              {...register(\"registeredDate\")}\n              onChange={(event) => {\n                setRegisteredDate(event.target.value);\n              }}\n            />\n            <p>{errors.registeredDate?.message}</p>\n          </div>\n\n          <div className=\"AddButton\">\n            <input className=\"button\" onClick={AddContact} type=\"submit\" />\n          </div>\n        </form>\n      </FormContainer>\n\n      {/* table list */}\n      <TableContainer>\n        <table>\n          <thead>\n            <th>ID</th>\n            <th>Full Name</th>\n            <th>Email</th>\n            <th>Contact Number</th>\n            <th>Location</th>\n            <th>Registered Date</th>\n            <th colSpan=\"3\">Action</th>\n          </thead>\n          <tbody>\n            {paginatedList.map((val, key) => {\n              return (\n                <tr key={val.id}>\n                  <td>{val.id}</td>\n                  <td>{val.fullName}</td>\n                  <td>{val.email}</td>\n                  <td>{val.contactNumber}</td>\n                  <td>{val.location}</td>\n                  <td>{val.registeredDate}</td>\n                  <td>\n                    <Link className=\"blue\" to={\"/View/\" + val.id}>\n                      View\n                    </Link>\n                  </td>\n                  <td>\n                    <Link className=\"green\" to={\"/Update/\" + val.id}>\n                      Update\n                    </Link>\n                  </td>\n                  <td>\n                    <Link className=\"red\" to={\"/Delete/\" + val.id}>\n                      Delete\n                    </Link>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n\n        <nav>\n          <ul className=\"\">\n            {pages.map((page) => (\n              <li\n                className={page === currentPage ? \"active-page\" : \"page-items\"}\n                onClick={() => pagination(page)}\n              >\n                {page}\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </TableContainer>\n    </Container>\n  );\n}\n","C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\components\\ViewContact.js",["32","33","34"],"import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Background from \"../components/images/back.jpg\";\nimport { useEffect, useState } from \"react\";\nimport Axios from \"axios\";\n\nconst ViewContainer = styled.div`\n  width: 100%;\n  height: 100vh;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: url(${Background}) no-repeat center;\n  -webkit-background-size: cover;\n  -moz-background-size: cover;\n  -o-background-size: cover;\n  background-size: cover;\n  position: relative;\n`;\n\nconst ViewContent = styled.div`\n  width: 30%;\n  height: fit-content;\n  padding: 20px 0px;\n  background: rgba(0, 0, 0, 0.522);\n  display: block;\n  z-index: 2;\n  border-radius: 10px;\n\n  label {\n    color: white;\n  }\n\n  h3 {\n    color: white;\n    text-align: center;\n    margin-top: 10px;\n    margin-bottom: 20px;\n  }\n\n  a {\n    color: white;\n    text-decoration: none;\n  }\n\n  .center {\n    width: fit-content;\n    margin: auto;\n  }\n\n  .ContentControl {\n    width: fit-content;\n    height: fit-content;\n    display: flex;\n  }\n\n  .OptionControl {\n    display: flex;\n    width: 100%;\n    align-items: center;\n    justify-content: center;\n    margin: auto;\n  }\n\n  .LinkControl {\n    border: 1px solid red;\n    text-align: center;\n    margin: 20px;\n    width: 15%;\n    padding: 5px 0px;\n    border-radius: 5px;\n    background: red;\n  }\n`;\n\nexport function View(props) {\n  const [viewDelete, setViewDelete] = useState([]);\n\n  useEffect(() => {\n    Axios.get(\n      \"http://localhost:3001/viewContact/\" + props.match.params.id\n    ).then((response) => {\n      setViewDelete(response.data);\n    });\n  });\n\n  return (\n    <ViewContainer>\n      <ViewContent>\n        <h3>Are you sure you want to delete this data?</h3>\n\n        {viewDelete.map((vals, key) => {\n          return (\n            <div className=\"center\">\n              <div className=\"ContentControl\">\n                <label>ID:&nbsp;&nbsp;{vals.id}</label>\n              </div>\n\n              <div className=\"ContentControl\">\n                <label>Full Name:&nbsp;&nbsp;{vals.fullName}</label>\n              </div>\n\n              <div className=\"ContentControl\">\n                <label>Email:&nbsp;&nbsp;{vals.email}</label>\n              </div>\n\n              <div className=\"ContentControl\">\n                <label>Contact:&nbsp;&nbsp;{vals.contactNumber}</label>\n              </div>\n\n              <div className=\"ContentControl\">\n                <label>Location:&nbsp;&nbsp;{vals.location}</label>\n              </div>\n\n              <div className=\"ContentControl\">\n                <label>Registered Date:&nbsp;&nbsp;{vals.registeredDate}</label>\n              </div>\n            </div>\n          );\n        })}\n\n        <div className=\"OptionControl\">\n          <div className=\"LinkControl\">\n            <Link to=\"/\">Back</Link>\n          </div>\n        </div>\n      </ViewContent>\n    </ViewContainer>\n  );\n}\n","C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\components\\DeleteContact.js",[],"C:\\Users\\mark.u.reolalas\\Downloads\\new-repo-main\\new-repo-main\\src\\components\\UpdateContact.js",["35","36","37","38"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport { useEffect, useState } from \"react\";\nimport Background from \"../components/images/back.jpg\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as Yup from \"yup\";\nimport Axios from \"axios\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// add contact container\nconst Container = styled.div`\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: url(${Background}) no-repeat center;\n  -webkit-background-size: cover;\n  -moz-background-size: cover;\n  -o-background-size: cover;\n  background-size: cover;\n  position: relative;\n\n  .separator {\n    width: 50%;\n    display: flex;\n  }\n`;\n\n// form design codes\nconst FormContainer = styled.div`\n  width: 60%;\n  height: fit-content;\n  padding: 20px 0px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  border-radius: 10px;\n  border: 1px solid dodgerblue;\n  z-index: 5;\n  background: rgba(0, 0, 0, 0.61);\n  box-shadow: 0 0 5px dodgerblue;\n\n  h3 {\n    color: white;\n  }\n\n  .InputControl {\n    width: 100%;\n    margin: auto;\n    display: block;\n    margin-bottom: 10px;\n  }\n\n  label {\n    color: white;\n  }\n\n  .InputControl input {\n    width: 100%;\n    margin-top: 3px;\n    padding: 3px 0px;\n  }\n\n  .InputControl select {\n    width: 100%;\n    padding: 3px 0px;\n  }\n\n  .InputControl p {\n    color: yellow;\n    text-align: center;\n    margin-top: 5px;\n    font-size: 12px;\n  }\n\n  .button {\n    padding: 3px 10px;\n  }\n\n  .AddButton {\n    width: fit-content;\n    margin: auto;\n  }\n\n  .control {\n    width: fit-content;\n    margin: auto;\n  }\n\n  .control button {\n    padding: 4px 4px;\n    border-radius: 5px;\n    background: blue;\n    color: white;\n  }\n\n  a {\n    padding: 5px 10px;\n    margin-top: 20px;\n    color: white;\n    background: red;\n    border-radius: 5px;\n    text-decoration: none;\n  }\n`;\n\nconst TableContainer = styled.div`\n  width: 60%;\n  height: fit-content;\n  z-index: 5;\n  margin: auto;\n  border: 1px solid;\n  margin-top: 145px;\n\n  th {\n    color: white;\n    background: dodgerblue;\n    padding: 5px;\n  }\n\n  td {\n    text-align: center;\n    padding: 5px 3px;\n    color: white;\n  }\n\n  td .blue {\n    padding: 5px 5px;\n    border: none;\n    color: white;\n    background: blue;\n    cursor: pointer;\n  }\n\n  td .green {\n    padding: 5px 5px;\n    border: none;\n    color: white;\n    background: green;\n    margin: 0px 8px;\n    cursor: pointer;\n  }\n\n  td .red {\n    padding: 5px 5px;\n    border: none;\n    color: white;\n    background: red;\n    cursor: pointer;\n  }\n\n  nav {\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n  }\n\n  nav ul {\n    display: flex;\n    list-style: none;\n    color: white;\n  }\n\n  nav ul li {\n    padding: 2px 5px;\n    color: black;\n    background: white;\n    border: 1px solid dodgerblue;\n    cursor: pointer;\n  }\n  nav ul li.active-page {\n    background: dodgerblue;\n    color: white;\n  }\n\n  table {\n    width: 100%;\n  }\n`;\n\nconst DataToUpdate = styled.div`\n  width: 40%;\n  height: fit-content;\n  padding: 20px 0px;\n  display: flex;\n  border-radius: 10px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.61);\n  box-shadow: 0 0 5px dodgerblue;\n\n  h3 {\n    text-align: center;\n    color: white;\n    margin-bottom: 10px;\n  }\n\n  .align {\n    display: block;\n    width: fit-content;\n    margin: auto;\n    margin-left: 20px;\n    color: white;\n  }\n`;\n\nconst schema = Yup.object().shape({\n  fullName: Yup.string(\"please input a valid name\").required(\n    \"First Name is required\"\n  ),\n  email: Yup.string()\n    .email(\"please input a valid email\")\n    .required(\"Email is required\"),\n  contactNumber: Yup.number()\n    .positive()\n    .integer()\n    .required(\"Contact number is required\"),\n  location: Yup.string().required(\"Location is required\"),\n  registeredDate: Yup.date().default(function () {\n    return new Date();\n  }),\n});\n\nexport function Update(props) {\n  const [viewUpdateContact, setViewUpdateContact] = useState([]);\n\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [contactNumber, setContactNumber] = useState(0);\n  const [location, setLocation] = useState(\"\");\n  const [registeredDate, setRegisteredDate] = useState(\"\");\n\n  useEffect(() => {\n    Axios.get(\n      \"http://localhost:3001/viewContact/\" + props.match.params.id\n    ).then((response) => {\n      setViewUpdateContact(response.data);\n    });\n  });\n\n  const updateContact = (id) => {\n    Axios.put(\"http://localhost:3001/updateContact\", {\n      id: id,\n      fullName: fullName,\n      email: email,\n      contactNumber: contactNumber,\n      location: location,\n      registeredDate: registeredDate,\n    });\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const submitForm = (data) => {};\n\n  return (\n    <Container>\n      <div className=\"separator\">\n        <FormContainer>\n          <h3>Update Contact</h3>\n\n          <form onSubmit={handleSubmit(submitForm)}>\n            {viewUpdateContact.map((vals, key) => {\n              return (\n                <div>\n                  <div className=\"InputControl\">\n                    <label>Full Name:</label>\n                    <input\n                      name=\"fullName\"\n                      placeholder=\"Last Name, First Name, Middle Initial\"\n                      {...register(\"fullName\")}\n                      onChange={(event) => {\n                        setFullName(event.target.value);\n                      }}\n                    />\n                    <p>{errors.fullName?.message}</p>\n                  </div>\n\n                  <div className=\"InputControl\">\n                    <label>Email:</label>\n                    <input\n                      name=\"email\"\n                      placeholder=\"Email\"\n                      {...register(\"email\")}\n                      onChange={(event) => {\n                        setEmail(event.target.value);\n                      }}\n                    />\n                    <p>{errors.email?.message}</p>\n                  </div>\n\n                  <div className=\"InputControl\">\n                    <label>Contact Number:</label>\n                    <input\n                      type=\"text\"\n                      name=\"contactNumber\"\n                      placeholder=\"09232321321\"\n                      {...register(\"contactNumber\")}\n                      onChange={(event) => {\n                        setContactNumber(event.target.value);\n                      }}\n                    />\n                    <p>{errors.contactNumber?.message}</p>\n                  </div>\n\n                  <div className=\"InputControl\">\n                    <label>Location:</label>\n                    <select\n                      name=\"location\"\n                      {...register(\"location\")}\n                      onChange={(event) => {\n                        setLocation(event.target.value);\n                      }}\n                    >\n                      <option value=\"\" disabled selected hidden>\n                        Select Location\n                      </option>\n                      <option>Manila</option>\n                      <option>Cebu</option>\n                    </select>\n                    <p>{errors.location?.message}</p>\n                  </div>\n\n                  <div className=\"InputControl\">\n                    <label>Full Name:</label>\n                    <input\n                      type=\"date\"\n                      name=\"registeredDate\"\n                      {...register(\"registeredDate\")}\n                      onChange={(event) => {\n                        setRegisteredDate(event.target.value);\n                      }}\n                    />\n                    <p>{errors.registeredDate?.message}</p>\n                  </div>\n                  <div className=\"control\">\n                    <button\n                      onClick={() => {\n                        updateContact(vals.id);\n                      }}\n                    >\n                      Update\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </form>\n\n          <Link to=\"/\">Back</Link>\n        </FormContainer>\n\n        <DataToUpdate>\n          <h3>Data to update</h3>\n\n          {viewUpdateContact.map((vals, key) => {\n            return (\n              <div class=\"align\">\n                <label>Full Name: {vals.fullName}</label>\n                <br />\n                <label>Email: {vals.email}</label>\n                <br />\n                <label>Contact Number{vals.contactNumber}</label>\n                <br />\n                <label>Location: {vals.location}</label>\n                <br />\n                <label>Registered Date: {vals.registeredDate}</label>\n              </div>\n            );\n          })}\n        </DataToUpdate>\n      </div>\n    </Container>\n  );\n}\n",{"ruleId":"39","severity":1,"message":"40","line":3,"column":27,"nodeType":"41","messageId":"42","endLine":3,"endColumn":33},{"ruleId":"39","severity":1,"message":"43","line":3,"column":35,"nodeType":"41","messageId":"42","endLine":3,"endColumn":41},{"ruleId":"39","severity":1,"message":"44","line":3,"column":43,"nodeType":"41","messageId":"42","endLine":3,"endColumn":48},{"ruleId":"39","severity":1,"message":"40","line":2,"column":27,"nodeType":"41","messageId":"42","endLine":2,"endColumn":33},{"ruleId":"39","severity":1,"message":"43","line":2,"column":35,"nodeType":"41","messageId":"42","endLine":2,"endColumn":41},{"ruleId":"39","severity":1,"message":"44","line":2,"column":43,"nodeType":"41","messageId":"42","endLine":2,"endColumn":48},{"ruleId":"39","severity":1,"message":"40","line":9,"column":27,"nodeType":"41","messageId":"42","endLine":9,"endColumn":33},{"ruleId":"39","severity":1,"message":"43","line":9,"column":35,"nodeType":"41","messageId":"42","endLine":9,"endColumn":41},{"ruleId":"39","severity":1,"message":"44","line":9,"column":43,"nodeType":"41","messageId":"42","endLine":9,"endColumn":48},{"ruleId":"39","severity":1,"message":"45","line":110,"column":7,"nodeType":"41","messageId":"42","endLine":110,"endColumn":21},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'Route' is defined but never used.","'TableContainer' is assigned a value but never used."]